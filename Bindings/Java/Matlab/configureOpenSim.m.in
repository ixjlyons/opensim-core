 function configureOpenSim
%% configureOpenSim() adds OpenSim library paths to MATLAB path files
%    Allows user to select the location of the OpenSim install directory
%    and add these paths to the matlab library paths. Will allow MATLAB 
%    users to run OpenSim calls in Matlab.
% #----------------------------------------------------------------------- %
% #The OpenSim API is a toolkit for musculoskeletal modeling and           %
% #simulation. See http://opensim.stanford.edu and the NOTICE file         %
% #for more information. OpenSim is developed at Stanford University       %
% #and supported by the US National Institutes of Health (U54 GM072970,    %
% #R24 HD065690) and by DARPA through the Warrior Web program.             %
% #                                                                        %   
% #Copyright (c) 2005-2016 Stanford University and the Authors             %
% #                                                                        %   
% #Licensed under the Apache License, Version 2.0 (the "License");         %
% #you may not use this file except in compliance with the License.        %
% #You may obtain a copy of the License at                                 %
% #http://www.apache.org/licenses/LICENSE-2.0.                             %
% #                                                                        % 
% #Unless required by applicable law or agreed to in writing, software     %
% #distributed under the License is distributed on an "AS IS" BASIS,       %
% #WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or         %
% #implied. See the License for the specific language governing            %
% #permissions and limitations under the License.                          %
% #----------------------------------------------------------------------- %

%% Determine the OpenSim install location and compatability
    % MATLAB root dir
    mr = matlabroot;
    % point to opensim folder
    correctFolder=0;
    while ~correctFolder
        prospectiveOpenSimFolder = getenv('OPENSIM_HOME');
        openSimFolder = uigetdir(prospectiveOpenSimFolder, 'Select the folder where OpenSim is installed.');
        if ~openSimFolder  % user cancelled process
            error('User cancelled function')
        end
        % Check if the correct OpenSim directory is selected
        if ~exist(fullfile(openSimFolder, '@CMAKE_INSTALL_SYSCONFDIR@', 'OpenSim_buildinfo.txt'))
            h = msgbox('Folder is not an OpenSim Install folder. Please select OpenSim Install folder', 'Error');
            uiwait(h)
        else
            correctFolder = 1;
            % Check if Matlab and OpenSim are compatible (64 vs 32 bit)
            checkSystemInfo(openSimFolder) 
        end
    end
%% Edit the classpath.txt file (need full path for print)
    % Create the string names used
    classFile = fullfile(mr, 'toolbox', 'local', 'classpath.txt');
    OpenSimJarPath =  fullfile(openSimFolder, '@OPENSIM_INSTALL_JAVAJARDIR@', '@SWIG_JAVA_JAR_NAME@');
    % Edit the class path txt file
    success = edit_path_txt_file(classFile, OpenSimJarPath);
    % If above failed, Matlab is probably new. Try newer technique.
    if ~success
        classFile = fullfile(prefdir, 'javaclasspath.txt');
        success = edit_path_txt_file(classFile, OpenSimJarPath);
        if ~success
            h = msgbox('Failed to add classpath.', 'Error');
            uiwait(h)
            error('Program exit');
        end
    end
%% Edit the librarypath.txt (need full path for print)
    % Create the string names used
    libraryFile = fullfile(mr, 'toolbox', 'local', 'librarypath.txt');
    OpenSimLibPath  = fullfile(openSimFolder, '@OPENSIM_INSTALL_SHAREDLIBDIR@');
    % Edit the library path txt file
    success = edit_path_txt_file(libraryFile, OpenSimLibPath);
    if ~success
        libraryFile = fullfile(prefdir, 'javalibrarypath.txt');
        success = edit_path_txt_file(libraryFile, OpenSimLibPath);
        if ~success
            h = msgbox('Failed to add librarypath.', 'Error');
            uiwait(h)
            error('Program exit');
        end
    end
%% Edit Matlab path
    cleanMatlabSearchPath
    addpath(OpenSimLibPath)
    savepath
%% Display message
    h = msgbox('Paths have been successfully updated. To complete setup, restart Matlab. To test your set up, type: model = org.opensim.modeling.Model();',  [char(openSimFolder) ' Successfully added!']);
    uiwait(h)
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [success] = edit_path_txt_file(txtname, spath)
    success = false;
    % If the file does not exist, try creating it.
    if not(exist(txtname, 'file'))
        fileID = fopen(txtname, 'w');
        if fileID == -1
            return
        end
    end
    % Edit's path .txt files. Deletes old entries and adds new path.
    % Open the txt file
    fileIDtest = fopen(txtname, 'r+');
    % Return fail if file id is invalid.
    if fileIDtest == -1
        return
    end
    fclose(fileIDtest);
    fileIDread = fopen(txtname, 'r');
    C = textscan(fileIDread,'%s', 'delimiter','\n');
    fclose(fileIDread);
    % Search the lines for previous entries and delete
    Cnew = searchForOpenSimString(C);
    % Add matlab jar path to cell
    [Cnrows,Cncols] = cellfun(@size, Cnew);
    Cnew{1}{Cnrows+1} = {spath};
    % Print the new cell array back to the txt file
    fileIDwrite = fopen(txtname, 'w');
    for i=1:Cnrows+1
        fprintf(fileIDwrite, '%s\n', char(Cnew{1}{i}));
    end
    fclose(fileIDwrite);
    success = true;
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function [newC] = searchForOpenSimString(C)
    newC = cell(1, 1);
    % Creates a new cell (newCnrows)and populates with only lines that dont
    % contain an 'OpenSim' string. Effectively deleting previous entries.
    [Cnrows,Cncols] = cellfun(@size, C);
    for i=1:Cnrows
        if isempty(strfind(lower(C{1}{i}),'opensim'))
           if i==1 
              newC{1}{1,1}=C{1}{1,1};
           else
              [newCnrows,k] = cellfun(@size, newC); 
               newC{1}{newCnrows+1,1} = C{1}{i,1};
           end
        end
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function checkSystemInfo(openSimFolder)
    % check to see if the buildinfo.txt file is present. This file will give
    % us install type info that determines compatability between MATLAB and
    % opensim (both 64 bit?)
    buildinfo_file = fullfile(openSimFolder, '@CMAKE_INSTALL_SYSCONFDIR@', 'OpenSim_buildinfo.txt');
    if ~exist(buildinfo_file)
        % is systemInfo.txt file available?
        h = msgbox(strcat('Unable to check if OpenSim is 64bit or 32bit. File ', buildinfo_file, ' not found.'), 'Error');
        uiwait(h)
        return
    else
        fileID = fopen(buildinfo_file);
        OpenSimInstallInfo = textscan(fileID,'%s');
        fclose(fileID);
        platformID=char(OpenSimInstallInfo{1,1}{end,1});
        OpenSimIs64bit = not(isempty(strfind(platformID, '64')));
        MatlabIs64bit = not(isempty(strfind(mexext, '64')));
        if MatlabIs64bit && not(OpenSimIs64bit)
            h = msgbox('Matlab is 64 bit. OpenSim is 32 bit. Re-build OpenSim with 64 bit compiler.','Error');
            uiwait(h)
            error('Program exit')
        elseif not(MatlabIs64bit) && OpenSimIs64bit
            h = msgbox('Matlab is 32 bit. OpenSim is 64 bit. Re-build OpenSim with 32 bit compiler.','Error');
            uiwait(h)
            error('Program exit') 
        end
    end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function cleanMatlabSearchPath
 % goes through the matlab search path and removes any folders that have
 % the strings 'OpenSim' and 'bin' in them. This is to clean out older bin
 % folders.

 % get the matlab path    
 matlabPath         = path;
 % matlab path is just 1 long string soindex location of ';'
 matLabFoldersIndex = strfind(matlabPath,';');
 matLabFoldersIndex = [0 matLabFoldersIndex];
 % How many folders?
 nFoldersInPath     = length(matLabFoldersIndex); 
 
 % for each folder
 for i = 1:nFoldersInPath-1
     % get the start end end index for each folder name   
     startString = matLabFoldersIndex(i);
     finishString = matLabFoldersIndex(i+1);
     % ouput the folder string
     folderName = matlabPath(startString+1 : finishString-1);
     
     % check to see if the folder string contains 'OpenSim' or 'bin'
     if ~isempty(strfind(lower(folderName), 'opensim')) && ~isempty(strfind(folderName, 'bin'))
         rmpath(folderName)
     end     
 end
end



